import collections

def DFSalgorithm():
    beginBox = boxPosition(state)                          # get position of boxs
    beginPlayer = actorPosition(state)                     # get position of actor

    startState = (beginPlayer, beginBox)
    frontier = collections.deque([[startState]])
    exploredSet = set()
    actions = [[0]] 
    while frontier:
        node = frontier.pop()
        node_action = actions.pop()
        if isWInGame(node[-1][-1]):
            return node
        if node[-1] not in exploredSet:
            exploredSet.add(node[-1])
            for action in nextMoves(node[-1][0], node[-1][1]):
                newPosPlayer, newPosBox = updateState(node[-1][0], node[-1][1], action)
                if isFailed(newPosBox):
                    continue
                frontier.append(node + [(newPosPlayer, newPosBox)])
                actions.append(node_action + [action[-1]])
                
if __name__ == '__main__':
    # select type input of game
    while True:
        type = input("Select input type (1 - Mini Comos, 2 - Mirco Comos): ")
        if type in ["1", "2"]:
            break

    # select lever input of game
    while True:
        lever = input("Select lever (1 - 60): ")
        if lever in ["1", "2"]:
            break

    filename = "{0}-{1}.txt".format("mini" if type == "1" else "micro", lever)
    # read game input from files in folder test/
    with open("test/" + filename,"r") as f:
        initial = f.readlines()

    state = transferToState(initial)
    posWalls = wallPosition(state)
    posGoals = goalPosition(state)

    startTime = time.time()
    while True:
        type = input("Select Algorithm type (1 - aStar, 2 - DFS): ")
        if type in ["1", "2"]:
            break
    result = aSearchAlgorithm() if type =="1" else DFSalgorithm()
    endTime=time.time()

    print("Runtime: {0} second.".format(endTime - startTime))

    if result:
        printResult(result, filename)
    else:
        print("Can't find the solution")
